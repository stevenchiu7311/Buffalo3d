#define GL_MODULATE 0x2100
#define GL_ADD 0x0104
#define GL_DECAL 0x2101
#define GL_BLEND 0x0BE2
#define GL_REPLACE 0x1E01

uniform bool textureEnabled[NUM_TEXTURES];
vec4 textureColor[NUM_TEXTURES];
uniform int textureEnvMode[NUM_TEXTURES];
void calcTextureEnvironment(inout vec4 color, int i);


void calcTextureColorContribution(inout vec4 color)
{
    // Fetch enabled texture colors
    for (int i=0;i<NUM_TEXTURES;i++) {
        if (textureEnabled[i]) {
            textureColor[i] = texture2D(uTexture[i], v_texCoord[i]);
            calcTextureEnvironment(color,i);
        }
    }
}

void calcTextureEnvironment(inout vec4 color, int i)
{
    if (u_lightingEnabled){
        color = color * textureColor[i];
        /*if (textureEnvMode[i] == GL_MODULATE) {
            color = color*textureColor[i];
        } else if (textureEnvMode[i] == GL_ADD) {
            color.rgb = color.rgb + textureColor[i].rgb;
            color.a = color.a * textureColor[i].a;
        } else if (textureEnvMode[i] == GL_DECAL) {
            color.rgb = mix(color.rgb, textureColor[i].rgb, textureColor[i].a);
        } else {
            color = color*textureColor[i];
        }*/
    } else {
        color = textureColor[i];
    }
    color = clamp(color, c_zerof, c_onef);
}